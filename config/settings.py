"""
Generated by 'django-admin startproject' using Django 3.0.6.
For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import environ

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# Define environment variables --- KEY: (typecasting, default) --- usage: env('KEY')
env = environ.Env(
    # SITE SECURITY
    DJANGO_SECRET_KEY=str,
    DJANGO_ALLOWED_HOSTS=(str, "0.0.0.0,localhost,127.0.0.1"),
    DJANGO_DEBUG=(bool, False),
    # DATA PERSISTENCE
    POSTGRES_USER=str,
    POSTGRES_PASSWORD=str,
    POSTGRES_DB=str,
    POSTGRES_HOST=str,
    POSTGRES_PORT=str,
    # MANUAL ACCOUNT CREATION -FLAG
    ADMIN_ONLY_USERAPI=(bool, False),
)
# Read .env file if exists, use it to override any user/system environment variables
environ.Env.read_env(BASE_DIR + "/.env")  # Unfortunate OS-specific path

##
# SITE SECURITY --- Reminder: run `manage.py check --deploy`
##
SECRET_KEY = env("DJANGO_SECRET_KEY")
ALLOWED_HOSTS = env("DJANGO_ALLOWED_HOSTS").split(",")
DEBUG = env("DJANGO_DEBUG")
# No SameSite configured so far
# No CORS configured so far


##
# APPLICATION DEFINITION
##
ADMIN_ONLY_USERAPI = env("ADMIN_ONLY_USERAPI")
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",  # shell_plus, model-ERDs, runserver_plus
    "rest_framework",
    "rest_framework.authtoken",
    "drf_yasg",
    "user_api",
    # No cacheops, but something to look into in future (automatic Model-specific database request caching)
]
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]
ROOT_URLCONF = "config.urls"
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
WSGI_APPLICATION = "config.wsgi.application"

##
# REST FRAMEWORK (API) CONFIGURATION
##
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.TokenAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",)
    + (
        ("rest_framework.renderers.BrowsableAPIRenderer",)
        if env("DJANGO_DEBUG")
        else ()
    ),
}

##
# LIVE DOCUMENTATION
##
SWAGGER_SETTINGS = {
    "USE_SESSION_AUTH": False,
    "SECURITY_DEFINITIONS": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "description": "Token <access key>",
        },
    },
}

##
# DATA PERSISTENCE
##
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "USER": env("POSTGRES_USER"),
        "PASSWORD": env("POSTGRES_PASSWORD"),
        "NAME": env("POSTGRES_DB"),
        "HOST": env("POSTGRES_HOST"),
        "PORT": env("POSTGRES_PORT"),
        "OPTIONS": {
            "connect_timeout": 5,  # 5s maps to reasonable maximum request-response time
        }
        # No CONN_MAX_AGE configured so far (db connection closed at the end of each request)
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Unconfigured i18n
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static URL-path and `python manage.py collectstatic` folder
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")

# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {"console": {"class": "logging.StreamHandler",},},
    "loggers": {
        # Root logger
        "": {"level": "WARNING", "handlers": ["console"],},
        # SQL logger
        # 'django.db.backends': {
        #     'level': 'DEBUG',
        #     'handlers': ['console'],
        #     'propagate': False,  # Prevent double-logging with root logger
        # }
    },
}
